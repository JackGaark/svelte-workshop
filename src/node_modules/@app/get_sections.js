import fs from 'fs';
import path from 'path';
import marked from 'marked';
import Prism from 'prismjs';
import 'prism-svelte';
import { extract_frontmatter } from '@sveltejs/site-kit/utils/markdown.js';

function make_slug(title) {
	return title.toLowerCase()
		.replace(/[^a-z]+/g, ' ').trim()
		.replace(/ /g, '-');
}

function escape(str) {
	return str
		.replace(/&/g, '&amp;')
		.replace(/</g, '&lt;')
		.replace(/>/g, '&gt;')
}

export function get_sections() {
	const sections = fs.readdirSync('content')
		.filter(file => file[0] !== '.' && path.extname(file) === '.md')
		.map(file => {
			const markdown = fs.readFileSync(`content/${file}`, 'utf-8');
			const { content, metadata } = extract_frontmatter(markdown);

			const section_slug = file.replace(/^\d+-/, '').replace(/\.md$/, '');

			const subsections = [];

			const renderer = new marked.Renderer();

			let uid = 1;

			renderer.code = (source, lang) => {
				let html;

				if (lang === 'diff') {
					source = escape(source.replace(/^([-+]?)( +)/gm, (_, op, space) => {
						return op + space.split('    ').join('\t');
					}));

					let css = [];
					const lines = source.split('\n').map(line => {
						if (line[0] === '+') {
							return `<span class="diff-add">${line.slice(1)}</span>\n`;
						}

						if (line[0] === '-') {
							const id = uid++;
							css.push(`.diff-remove[data-id="${id}"]::before{content:${JSON.stringify(line).replace(/\\t/g, '\\000009')}}`);
							return `<span class="diff-remove" data-id="${id}"></span>`;
						}

						return `<span>${line}</span>\n`;
					});

					html = `<style>${css.join('')}</style>${lines.join('')}`;
				}

				else {
					source = source.replace(/^ +/gm, match =>
						match.split('    ').join('\t')
					);

					if (Prism.languages[lang]) {
						html = Prism.highlight(source, Prism.languages[lang], lang);
					} else {
						html = escape(source);
					}
				}



				return `<pre><code>${html}</code></pre>`;
			};

			renderer.heading = (text, level, title) => {
				const slug = level <= 4 && make_slug(title);

				subsections.push({ slug, title });

				return `
					<h${level}>
						<span id="${slug}" class="offset-anchor" ${level > 4 ? 'data-scrollignore' : ''}></span>
						<a href="${section_slug}#${slug}" class="anchor" aria-hidden="true"></a>
						${text}
					</h${level}>`;
			};

			renderer.link = (href, title, text) => {
				return `<a target="_blank" noopener noreferer href="${href}">${text}</a>`;
			};

			const html = marked(content, { renderer });

			return {
				title: metadata.title,
				slug: section_slug,
				subsections,
				html,
				next: null
			};
		});

	sections.forEach((section, i) => {
		const next = sections[i + 1];

		if (next) {
			section.next = {
				title: next.title,
				slug: next.slug
			};
		}
	});

	return sections;
}
